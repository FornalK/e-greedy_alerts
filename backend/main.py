from idlelib.query import Query

from fastapi import FastAPI, WebSocket, WebSocketDisconnect, HTTPException
from fastapi.responses import FileResponse
import pandas as pd
import os
import asyncio
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from urllib.parse import parse_qs

from mab import EpsilonGreedy

# Inicjalizacja bandyty
num_variants = 9
epsilon = 0.2

# Model danych odbieranych z frontendu
class AlertData(BaseModel):
    user: str
    alertNumber: int
    alertTime: float

# Aplikacja FastAPI
app = FastAPI()

# Lista aktywnych po≈ÇƒÖcze≈Ñ WebSocket
active_connections = {} # user -> websocket


bandits = {}              # user -> instancja EpsilonGreedy
bandit_ids = {}      # user -> instance number
bandit_counter = 0        # aby zapisywaƒá unikalne id bandyt√≥w

# Konfiguracja aplikacji FastAPI
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Nazwa pliku gdzie zapisywane sa dane
FILE_PATH = os.path.abspath("data.xlsx")

# Tworzenie pliku je≈õli nie istnieje
if not os.path.exists(FILE_PATH):
    df = pd.DataFrame(columns=["User", "alertNumber", "alertTime"])
    df.to_excel(FILE_PATH, index=False)

# Funkcja, kt√≥ra wysy≈Ça wiadomo≈õƒá na stronƒô serwera
@app.get("/")
def root():
    return {"message": "Backend dzia≈Ça poprawnie üöÄ"}

# Endpoint do pobrania pliku
@app.get("/download")
async def download_file():
    if not os.path.exists(FILE_PATH):
        raise HTTPException(status_code=404, detail="File not found")
    return FileResponse(FILE_PATH, media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', filename="data.xlsx")

# Funkcja, kt√≥ra otrzymuje i zapisuje dane z frontendu
@app.post("/save/")
async def save_data(data: AlertData):
    print(f"üîç Otrzymane dane: {data}")
    df = pd.read_excel(FILE_PATH)
    df.loc[len(df)] = [data.user, data.alertNumber, data.alertTime]
    df.to_excel(FILE_PATH, index=False)

    # Aktualizacja modelu bandyty konkretnego u≈ºytkownika
    # Po uzyskaniu nagrody (np. ujemnego czasu ekspozycji)
    user = data.user
    reward = -float(data.alertTime) # Im kr√≥tszy czas, tym wy≈ºsza nagroda
    selected_variant = int(data.alertNumber)

    bandit = bandits.get(user)
    if bandit:
        bandit.update(selected_variant - 1, reward)
    else:
        print(f"‚ö†Ô∏è Brak instancji MAB dla u≈ºytkownika: {user}")

    # Uruchomienie asynchronicznej funkcji do wys≈Çania numeru dla nowego alertu przez WebSocket
    asyncio.create_task(send_new_alert_number(data.user))

    return {"message": "Zapisano"}

# Endpointy do ≈ÇƒÖczenia siƒô z frontendem
@app.websocket("/ws/connect")
async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    global bandit_counter

    # Parsowanie query string
    query_params = parse_qs(websocket.url.query)
    user = query_params.get("user", [None])[0]

    if not user:
        await websocket.send_text("‚ùå Nie podano u≈ºytkownika w URL")
        await websocket.close()
        return

    # Tworzenie osobnej instancji bandyty dla danego u≈ºytkownika (je≈õli nie istnieje)
    if user not in bandits:
        bandits[user] = EpsilonGreedy(num_variants, epsilon)
        bandit_counter += 1
        bandit_ids[user] = f"MAB{bandit_counter}"

    # Informacja o przypisanym MAB
    mab_id = bandit_ids[user]
    await websocket.send_text(f"Po≈ÇƒÖczono z instancjƒÖ: {mab_id}")

    while True:
        try:
            data = await websocket.receive_text()
            await websocket.send_text(f"Serwer otrzyma≈Ç: {data}")
        except WebSocketDisconnect:
            print(f"‚ùå U≈ºytkownik {user} roz≈ÇƒÖczy≈Ç siƒô z /ws/connect")

@app.websocket("/ws/newAlertNumber")
async def websocket_new_alert_number(websocket: WebSocket):
    await websocket.accept()

    # Parsowanie query string
    query_params = parse_qs(websocket.url.query)
    user = query_params.get("user", [None])[0]

    if not user:
        await websocket.send_text("‚ùå Nie podano u≈ºytkownika w URL")
        await websocket.close()
        return

    active_connections[user] = websocket
    print(f"üîå Nowe po≈ÇƒÖczenie WebSocket od u≈ºytkownika: {user}")

    try:
        while True:
            await websocket.receive_text()  # Czeka na dane
    except WebSocketDisconnect:
        print(f"‚ùå WebSocket roz≈ÇƒÖczony: {user}")
        del active_connections[user]

# Funkcja, kt√≥ra wysy≈Ça informacje o wybranych przez algorytm alertach
async def send_new_alert_number(user: str):
    websocket = active_connections.get(user)

    if not active_connections:
        print("‚ö†Ô∏è Brak aktywnych po≈ÇƒÖcze≈Ñ WebSocket")
        return

    newAlertNumber = findNewAlertNumber(user)
    print(f"üì§ Wysy≈Çanie liczby {newAlertNumber} dla u≈ºytkownika {user}")

    # Wysy≈Çamy do konkretnego u≈ºytkownika
    try:
        await websocket.send_text(str(newAlertNumber))
    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd podczas wysy≈Çania do {user}: {e}")

# Funkcja, kt√≥ra wybiera wariant alertu przez wielorƒôkiego bandyte
def findNewAlertNumber(user: str):
    bandit = bandits.get(user)
    if bandit:
        # Wyb√≥r wariantu alertu dla konkretnego u≈ºytkownika
        variant = bandit.select_variant()
        return variant + 1 # + 1 bo indeksujemy od 0
    else:
        print(f"‚ö†Ô∏è Brak bandyty dla u≈ºytkownika {user}")
        return -1  # domy≈õlnie